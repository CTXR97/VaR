VaR Calculation in Excel using Variance-Covariance approach

Excel:

1. Calculate the returns of the closing price Returns = Today’s Price - Yesterday’s Price / Yesterday’s Price
2. Calculate the mean of the returns using the average function
3. Calculate the standard deviation of the returns using STDEV function
4. Finally, we calculate the VaR for 90, 95, and 99 confidence level using NORM.INV function. 
This function has three parameters: probability, mean, and standard deviation. 
In probability, we use 0.1, 0.05, 0.01 respectively for the VaR(90), VaR(95), and VaR(99)

Python:

#Data Manipulation
import numpy as np 
import pandas as pd

#Plotting
import matplotlib.pyplot as plt
import seaborn
import matplotlib.mlab as mlab

#Statistical calculation
from scipy.stats import norm

#Tabular data output
from tabulate import tabulate

df = read_excel("xxx.xlsx")
df = df[['Close']]
df['returns'] = df.Close.pct_change()

mean = np.mean(df['returns'])
std_dev = np.std(df['returns'])

df['returns'].hist(bins=40, normed=True, histtype='stepfilled', alpha=0.5)
x = np.linspace(mean -3*std_dec, mean+ 3*std_dev, 100)
plt.plot(x.mlab.normpdf(x, mean, std_dev), "r")
plt.show()


#Calculate VaR using point percentile function
VaR_90 = norm.ppf(1-0.9, mean, std_dev)
VaR_95 = norm.ppf(1-0.95, mean, std_dev)
VaR_99 = norm.ppf(1-0.99, mean, std_dev)

print tabulate([['90%', VaR_90], ['95%', VaR_95], ['99%', VaR_99]], headers=['Confidence level', 'Value at Risk'])

# VaR Calculation using the Historical Simulation approach

1. Similar to the variance-covariance approach, first we calculate the returns of the stock Returns = Today’s Price - Yesterday’s Price / Yesterday’s Price
2. Sort the returns from worst to best.
3. Next, we calculate the total count of the returns using count function.
4. he VaR(90) is the sorted return corresponding to the 10% of the total count.
5. Similarly, the VaR(95) and VaR(99) is the sorted return corresponding to the 5% and 1% of the total count respectively.

#Data Manipulation
import numpy as np 
import pandas as pd

#Plotting
import matplotlib.pyplot as plt
import seaborn
import matplotlib.mlab as mlab

#Statistical calculation
from scipy.stats import norm

#Tabular data output
from tabulate import tabulate

df = read_excel(xxx.xlsx)
df['returns'] = df.Close.pct_change()
df = df.dropna()
plt.hist(df.returns, bins=40)
plt.xlabel('Returns')
plt.ylabel('Freqiemcu')
plt.grid(True)
plt.show()

df.sort_values('returns', inplace=True, ascending = True)

VaR_90 = df['returns'].quantile(0.1)
VaR_95 = df['returns'].quantile(0.5)
VaR_99 = df['returns'].quantile(0.01)

print tabulate([['90%', VaR_90], ['95%', VaR_95], ['99%', VaR_99]], headers=['Confidence level', 'Value at Risk'])

